package publiccode

import (
	"bytes"
	"encoding/base64"
	"net/url"

	"github.com/dyatlov/go-oembed/oembed"
)

// checkOembed tells whether the link is hosted on a valid oembed provider.
func (p *parser) checkOembed(key string, link *url.URL) (*url.URL, error) {
	if link.String() == "" {
		return link, newErrorInvalidValue(key, "empty oembed link")
	}

	// Load oembed library and providers.js on from base64 variable
	oe := oembed.NewOembed()
	providers, err := decodeOembedProviders(oembedBase64ProvidersJSON)
	if err != nil {
		return link, err
	}
	oe.ParseProviders(bytes.NewReader(providers))

	item := oe.FindItem(link.String())

	if item != nil {
		info, err := item.FetchOembed(oembed.Options{URL: link.String()})
		if err != nil {
			return link, newErrorInvalidValue(key, "invalid oembed link: %s", err)
		} else {
			if info.Status >= 300 {
				return link, newErrorInvalidValue(key, "invalid oembed link Status: %d", info.Status)
			} else {
				return link, nil
			}
		}
	}

	return link, newErrorInvalidValue(key, "invalid oembed link: %s", link)
}

// Decode with standard base64 the oembed data.
func decodeOembedProviders(data string) ([]byte, error) {
	return base64.StdEncoding.DecodeString(data)
}

// A oembedBase64ProvidersJSON represents the oembed provider.json
// Reference: https://oembed.com/providers.json
// Lat update: 15/06/2018
var oembedBase64ProvidersJSON = ``
